
// Do not edit this file function (use only)
// add this file in source/External file
// add source_Date.c in source/External file

#pragma once

#include <corecrt.h> 
#ifndef  DATE_STRUCT_DEFINED
#define  DATE_STRUCT_DEFINED
typedef  struct Struct_date{
	int  day;
	int  month;
	int  year;
	char sddmmyyyy[11];
	char sTime[11];
	int  minute;
	int  hours;
}DateTime;
static DateTime const NULL_DATETIME = { 0,0,0,"00/00/0000","00:00xx",0,0 };
#endif


/*******************************************
*
*                   TIME
*
*******************************************/

// display request input onetime(dd/mm/yyyy) and save in (string) and (int)
// eg. get_In_fDate("brithday", &variable)
void get_In_fDate(
	const char * const dateName,
	DateTime   *       date
);  //14 reference call

// display request input three time (day month year) and save in (string) and (int)
// eg. get_In_Date("brithday", &variable)
void get_In_Date(
	const char * const dateName,
	DateTime   *       date
);  // 1 reference call

// read int(day month year) in struct and from string(dd/mm/yyyy) and save in element sddmmyyyy
// eg. get_str_Date(&variable)
void get_str_Date(
	DateTime *date
);  // 2 reference call

// read string(sddmmyyy)in format(dd/mm/yyyy) from struct and store in int(day month year)
// eg. get_Date_read_str(&variable)
void get_Date_read_str(
	DateTime * date
);  // 8 reference call

// calculate date correctly (include leap year checking)
// must pass a valid date
// eg. cal_Date(&todayDate, 10)
void cal_Date(
	DateTime * cal,
	const int  addDay
);  // 8 reference call

// check element in date is valid value or not(support leap year data)
// eg. if(isDate(birthday) == FALSE)
//         printf("Invalid Birthday Date Please Enter Agian");
__crt_bool isDate(
	const DateTime date
);  // 10 reference call

// Compare function //

// eg. if(cmpDate(&todayDate, &examDay) == TRUE)
//         printf("Today Is my exam date");
__crt_bool cmpDate(
	const DateTime *date1,
	const DateTime *date2
);

/*******************************************
*
*                   TIME
*
*******************************************/

// read string in the struct sTime and get the value of time store in int
// eg. get_Time_read_str(&visitTime);
void get_Time_read_str(
	DateTime * time
);

// read int(hour & month) in the struct 
// and from string in format 12:30pm 
// eg. get_str_Time(&visitTime);
void get_str_Time(
	DateTime * time
);

// calculate Time accurately and extra hour will store in day
// eg. cal_Time(&appointMent, 9, 30);
void cal_Time(
	DateTime  * cal,
	const int   addMinute,
	const int   addHour
);

// see stored data in DateTime is time or not
__crt_bool isTime(
	const DateTime * date1
);
// This check the open time 
// eg. if(isOpenTime(&visitTime) == FALSE)
//          printf("Now We Still not yet open");
__crt_bool isOpenTime(
	const DateTime * date1
);

// compare two time is same or not
// same return TRUE
// if(cmpTime(&appointmentTime, &now) == TRUE)
//     printf("Now Is Appointment Time");
__crt_bool cmpTime(
	const DateTime *time1,
	const DateTime *time2
);

/*******************************************
*
*                 DATE TIME
*
*******************************************/

// eg. DateTime birthday = new_Date(24, 7, 2018); dd/mm/yyyy will save in sddmmyyyy
DateTime new_Date(
	const int day,
	const int month,
	const int year
);

// eg. DateTime birthday = new_Date("24/7/2018"); 
// eg. DateTime birthday = new_Date("24/7/2018-12:30pm"); 
DateTime new_sDateTime(
	const char * date
);
